{"ast":null,"code":"import { getChildrenByRoomName } from \"./componants/backend/fetchData\";\nexport class User {\n  constructor(userId, username) {\n    this.userId = void 0;\n    this.username = void 0;\n    this.role = void 0;\n    this.children = void 0;\n    this.profileImage = void 0;\n    this.room = void 0;\n    this.username = username;\n    this.userId = userId;\n  }\n  setRoom(room) {\n    this.room = room;\n  }\n  setRole(role) {\n    this.role = role;\n  }\n  setChild(child) {\n    var _this$children;\n    (_this$children = this.children) === null || _this$children === void 0 ? void 0 : _this$children.push(child);\n  }\n  setBlob(blob) {\n    this.profileImage = blob;\n  }\n  getUserId() {\n    return this.userId;\n  }\n  getUsername() {\n    return this.username;\n  }\n  getRole() {\n    return this.role;\n  }\n  getChildren() {\n    return this.children;\n  }\n  getProfileImage() {\n    return this.profileImage;\n  }\n  getRoom() {\n    return this.room;\n  }\n}\nexport class Children {\n  constructor(id, firstName, lastName, isAttending) {\n    this.id = void 0;\n    this.firstName = void 0;\n    this.lastName = void 0;\n    this.dateOfBirth = void 0;\n    this.attending = void 0;\n    this.room = void 0;\n    this.id = id;\n    this.firstName = firstName;\n    this.lastName = lastName;\n    this.attending = isAttending;\n  }\n  setDateOfBirth(day, month, year) {\n    let dob = new Date(day + \"-\" + month + \"-\" + year);\n    this.dateOfBirth = dob;\n  }\n  setAttending(isAttending) {\n    this.attending = isAttending;\n  }\n  setRoom(room) {\n    this.room = room;\n  }\n  getId() {\n    return this.id;\n  }\n  getFirstName() {\n    return this.firstName;\n  }\n  getLastName() {\n    return this.lastName;\n  }\n  getDateOfBirth() {\n    if (this.dateOfBirth) return this.dateOfBirth;else throw new Error(\"Date of birth not set\");\n  }\n  getAttending() {\n    return this.attending;\n  }\n  getRoom() {\n    if (this.room) return this.room;else throw new Error(\"Room not set\");\n  }\n}\nexport class Rooms {\n  constructor(roomName) {\n    this.roomName = void 0;\n    this.childrenAttending = [];\n    this.roomName = roomName;\n    // Get children by room\n    // Add each child to the list\n    getChildrenByRoomName(roomName).then(childArray => {\n      console.log(childArray);\n      this.childrenAttending = childArray;\n    });\n  }\n  addChild(newChild) {\n    this.childrenAttending.push(newChild);\n  }\n  removeChild(childToRemove) {\n    for (let i = 0; i < this.childrenAttending.length - 1; i++) {\n      if (this.childrenAttending[i].getId() == childToRemove.getId()) {\n        this.childrenAttending = this.childrenAttending.splice(i, 1);\n      }\n    }\n  }\n  getChildren() {\n    if (this.childrenAttending) return this.childrenAttending;else throw new Error(\"Unable to fetch children from class Rooms\");\n  }\n  getRoomName() {\n    if (this.roomName) return this.roomName;else throw new Error(\"Unable to fetch room name from class Rooms\");\n  }\n  getChildrenCount() {\n    if (this.childrenAttending) return this.childrenAttending.length;else throw new Error(\"Unable to return number of children\");\n  }\n}","map":{"version":3,"names":["getChildrenByRoomName","User","constructor","userId","username","role","children","profileImage","room","setRoom","setRole","setChild","child","_this$children","push","setBlob","blob","getUserId","getUsername","getRole","getChildren","getProfileImage","getRoom","Children","id","firstName","lastName","isAttending","dateOfBirth","attending","setDateOfBirth","day","month","year","dob","Date","setAttending","getId","getFirstName","getLastName","getDateOfBirth","Error","getAttending","Rooms","roomName","childrenAttending","then","childArray","console","log","addChild","newChild","removeChild","childToRemove","i","length","splice","getRoomName","getChildrenCount"],"sources":["C:/Users/c_mil/Desktop/Dev/TypeScript/care-central/src/classes.tsx"],"sourcesContent":["import { getChildrenByRoomName } from \"./componants/backend/fetchData\"\r\n\r\nexport class User {\r\n    private userId: number\r\n    private username: string\r\n    private role?: string\r\n    private children?: Children[]\r\n    private profileImage?: Blob\r\n    private room?: string\r\n\r\n    constructor(userId: number, username: string) {\r\n        this.username = username\r\n        this.userId = userId\r\n    }\r\n\r\n    public setRoom(room: string) {\r\n        this.room = room\r\n    }\r\n    public setRole(role: string) {\r\n        this.role = role\r\n    }\r\n    public setChild(child: Children) {\r\n        this.children?.push(child)\r\n    }\r\n    public setBlob(blob: Blob) {\r\n        this.profileImage = blob\r\n    }\r\n\r\n    public getUserId(): number {\r\n        return this.userId\r\n    }\r\n    public getUsername(): string {\r\n        return this.username\r\n    }\r\n    public getRole(): string | undefined {\r\n        return this.role\r\n    }\r\n    public getChildren(): Children[] | undefined {\r\n        return this.children\r\n    }\r\n    public getProfileImage(): Blob | undefined {\r\n        return this.profileImage\r\n    }\r\n    public getRoom(): string | undefined {\r\n        return this.room\r\n    }\r\n}\r\n\r\nexport class Children {\r\n    private id: number\r\n    private firstName: string\r\n    private lastName: string\r\n    private dateOfBirth?: Date\r\n    private attending: boolean\r\n    private room?: string\r\n\r\n    constructor(id: number, firstName: string, lastName: string, isAttending: boolean) {\r\n        this.id = id\r\n        this.firstName = firstName\r\n        this.lastName = lastName\r\n        this.attending = isAttending\r\n    }\r\n\r\n    public setDateOfBirth(day: number, month: number, year: number) {\r\n        let dob: Date = new Date(day + \"-\" + month + \"-\" + year)\r\n        this.dateOfBirth = dob\r\n    }\r\n    public setAttending(isAttending: boolean) {\r\n        this.attending = isAttending\r\n    }\r\n    public setRoom(room: string) {\r\n        this.room = room\r\n    }\r\n\r\n    public getId() {\r\n        return this.id\r\n    }\r\n    public getFirstName() {\r\n        return this.firstName\r\n    }\r\n    public getLastName() {\r\n        return this.lastName\r\n    }\r\n    public getDateOfBirth() {\r\n        if (this.dateOfBirth)\r\n            return this.dateOfBirth\r\n        else\r\n            throw new Error(\"Date of birth not set\")\r\n    }\r\n    public getAttending() {\r\n        return this.attending\r\n    }\r\n    public getRoom() {\r\n        if (this.room)\r\n            return this.room\r\n        else\r\n            throw new Error(\"Room not set\")\r\n    }\r\n}\r\n\r\nexport class Rooms {\r\n    private roomName: string\r\n    private childrenAttending: Children[] = []\r\n\r\n    constructor(roomName: string) {\r\n        this.roomName = roomName\r\n        // Get children by room\r\n        // Add each child to the list\r\n        getChildrenByRoomName(roomName)\r\n            .then((childArray) => {\r\n                console.log(childArray)\r\n                this.childrenAttending = childArray\r\n            })\r\n    }\r\n\r\n    public addChild(newChild: Children) {\r\n        this.childrenAttending.push(newChild)\r\n    }\r\n\r\n    public removeChild(childToRemove: Children) {\r\n        for (let i = 0; i < (this.childrenAttending.length - 1); i++) {\r\n            if (this.childrenAttending[i].getId() == childToRemove.getId()) {\r\n                this.childrenAttending = this.childrenAttending.splice(i, 1)\r\n            }\r\n        }\r\n    }\r\n\r\n    public getChildren() {\r\n        if (this.childrenAttending)\r\n            return this.childrenAttending\r\n        else\r\n            throw new Error(\"Unable to fetch children from class Rooms\")\r\n    }\r\n    public getRoomName() {\r\n        if (this.roomName)\r\n            return this.roomName\r\n        else\r\n            throw new Error(\"Unable to fetch room name from class Rooms\")\r\n    }\r\n    public getChildrenCount() {\r\n        if (this.childrenAttending)\r\n            return this.childrenAttending.length\r\n        else\r\n            throw new Error(\"Unable to return number of children\")\r\n    }\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}