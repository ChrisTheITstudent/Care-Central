{"ast":null,"code":"import { getChildrenByRoomName, getEducatorsByRoomName } from \"./componants/backend/fetchData\";\nexport class User {\n  constructor(userId, username) {\n    this.userId = void 0;\n    this.username = void 0;\n    this.role = void 0;\n    this.children = [];\n    this.profileImage = void 0;\n    this.profileImageUrl = void 0;\n    this.room = void 0;\n    this.jobTitle = void 0;\n    this.qualification = void 0;\n    this.qualificationInstituation = void 0;\n    this.emergencyContact = void 0;\n    this.emergencyNumber = void 0;\n    this.username = username;\n    this.userId = userId;\n  }\n  setRoom(room) {\n    this.room = room;\n  }\n  setRole(role) {\n    this.role = role;\n  }\n  setChild(child) {\n    var _this$children;\n    (_this$children = this.children) === null || _this$children === void 0 ? void 0 : _this$children.push(child);\n  }\n  setBlob(blob) {\n    if (this.profileImageUrl) {\n      URL.revokeObjectURL(this.profileImageUrl);\n    }\n    this.profileImage = blob;\n    if (blob instanceof Blob) {\n      this.profileImageUrl = URL.createObjectURL(blob);\n    } else {\n      this.profileImageUrl = undefined;\n    }\n  }\n  setJobTitle(title) {\n    this.jobTitle = title;\n  }\n  setQulification(qualification) {\n    this.qualification = qualification;\n  }\n  setQualInstitution(institution) {\n    this.qualificationInstituation = institution;\n  }\n  setEmergencyContact(contact) {\n    this.emergencyContact = contact;\n  }\n  setEmergencyNumber(emergencyNumber) {\n    this.emergencyNumber = emergencyNumber;\n  }\n  getUserId() {\n    return this.userId;\n  }\n  getUsername() {\n    return this.username;\n  }\n  getRole() {\n    return this.role;\n  }\n  getChildren() {\n    return this.children;\n  }\n  getProfileImage() {\n    return this.profileImage;\n  }\n  getRoom() {\n    return this.room;\n  }\n  getJobTitle() {\n    return this.jobTitle;\n  }\n  getQualification() {\n    return this.qualification;\n  }\n  getQualificationInstitution() {\n    return this.qualificationInstituation;\n  }\n  getEmergencyContact() {\n    return this.emergencyContact;\n  }\n  getEmergencyNumber() {\n    return this.emergencyNumber;\n  }\n}\nexport class Children {\n  constructor(id, firstName, lastName, isAttending) {\n    this.id = void 0;\n    this.firstName = void 0;\n    this.lastName = void 0;\n    this.dateOfBirth = void 0;\n    this.attending = void 0;\n    this.room = void 0;\n    this.medicalPlan = void 0;\n    this.allergies = [];\n    this.authorizedPersons = [];\n    this.emergencyContact1 = {\n      name: \"Not Provided\",\n      contact: 0o0\n    };\n    this.emergencyContact2 = {\n      name: \"Not Provided\",\n      contact: 0o0\n    };\n    this.id = id;\n    this.firstName = firstName;\n    this.lastName = lastName;\n    this.attending = isAttending;\n  }\n  removeAllergy(allergyToRemove) {\n    // Remove allergy\n  }\n  removeAuthorizedPerson(firstName, lastName) {\n    // Remove person\n  }\n  removeEmergencyContact(nameToRemove) {\n    if (this.emergencyContact1.name === nameToRemove) this.emergencyContact1 = {\n      name: \"Not Provided\",\n      contact: 0o0\n    };else if (this.emergencyContact2.name === nameToRemove) this.emergencyContact2 = {\n      name: \"Not Provided\",\n      contact: 0o0\n    };else throw new Error(`${nameToRemove} was not found in emergency contacts`);\n  }\n  addEmergencyContact(priority, name, contactNumber) {\n    if (priority === 1) {\n      this.emergencyContact1 = {\n        name: name,\n        contact: contactNumber\n      };\n    } else if (priority === 2) {\n      this.emergencyContact2 = {\n        name: name,\n        contact: contactNumber\n      };\n    } else throw new Error(\"Emergency contact must be either 1st or 2nd emergency contact\");\n  }\n  addAuthorizedPerson(firstName, lastName) {\n    this.authorizedPersons.push(firstName);\n    this.authorizedPersons.push(lastName);\n  }\n  addAllergy(allergy) {\n    var _this$allergies;\n    (_this$allergies = this.allergies) === null || _this$allergies === void 0 ? void 0 : _this$allergies.push(allergy);\n  }\n  setMedicalPlan(hasMedicalPlan) {\n    this.medicalPlan = hasMedicalPlan;\n  }\n  setDateOfBirth(day, month, year) {\n    let dob = new Date(day + \"-\" + month + \"-\" + year);\n    this.dateOfBirth = dob;\n  }\n  setAttending(isAttending) {\n    this.attending = isAttending;\n  }\n  setRoom(room) {\n    this.room = room;\n  }\n  getId() {\n    return this.id;\n  }\n  getFirstName() {\n    return this.firstName;\n  }\n  getLastName() {\n    return this.lastName;\n  }\n  getDateOfBirth() {\n    if (this.dateOfBirth) return this.dateOfBirth;else throw new Error(\"Date of birth not set\");\n  }\n  getAttending() {\n    return this.attending;\n  }\n  getRoom() {\n    if (this.room) return this.room;else throw new Error(\"Room not set\");\n  }\n  hasMedicalPlan() {\n    if (this.medicalPlan) return this.medicalPlan;else return false;\n  }\n  getAllergies() {\n    if (this.allergies) return this.allergies;else return \"No allergies\";\n  }\n  getAuthorizedPersons() {\n    if (this.authorizedPersons) {\n      let authorizedList = [];\n      for (let i = 0; i < this.authorizedPersons.length; i += 2) {\n        const element = this.authorizedPersons[i];\n        const element2 = this.authorizedPersons[i + 1];\n        const newAuthorizedPerson = {\n          firstName: element,\n          lastName: element2\n        };\n        authorizedList.push(newAuthorizedPerson);\n      }\n      return authorizedList;\n    } else throw new Error(\"No authorized persons\");\n  }\n  getEmergencyContact1() {\n    return this.emergencyContact1;\n  }\n  getEmergencyContact2() {\n    return this.emergencyContact2;\n  }\n  getAge() {\n    const childDOB = this.getDateOfBirth();\n    let diff = Date.now() - childDOB.getTime();\n    let seconds = Math.floor(diff / 1000);\n    let minutes = Math.floor(seconds / 60);\n    let hours = Math.floor(minutes / 60);\n    let days = Math.floor(hours / 24);\n    let months = Math.floor(days / 30);\n    let years = Math.floor(days / 365);\n    seconds %= 60;\n    minutes %= 60;\n    hours %= 24;\n    days %= 30;\n    months %= 12;\n    return `${years} yrs, ${months} mths`;\n  }\n}\nexport class Rooms {\n  constructor(roomName) {\n    this.roomName = void 0;\n    this.childrenAttending = [];\n    this.educatorsPresent = [];\n    this.isCompliant = false;\n    this.roomName = roomName;\n  }\n  addChild(newChild) {\n    this.childrenAttending.push(newChild);\n    this.setCompliance();\n  }\n  setCompliance() {\n    let ratio;\n    if (this.childrenAttending.length === 0) {\n      this.isCompliant = true;\n    } else if (this.childrenAttending.length > 0 && this.educatorsPresent.length > 0) {\n      switch (this.roomName) {\n        case \"Babies\":\n          ratio = 4;\n          break;\n        case \"Toddlers\":\n          ratio = 5;\n          break;\n        case \"Pre Kindergarten\":\n          ratio = 8;\n          break;\n        case \"Kindergarten\":\n          ratio = 11;\n          break;\n        case \"Preschool\":\n          ratio = 12;\n          break;\n        default:\n          throw new Error(`Room name ${this.roomName} does not match any hard coded room name`);\n      }\n      const requiredEducators = Math.ceil(this.childrenAttending.length / ratio);\n      this.isCompliant = this.educatorsPresent.length >= requiredEducators;\n    }\n  }\n  removeChild(childToRemove) {\n    this.childrenAttending = this.childrenAttending.filter(child => child.getId() !== childToRemove.getId());\n    this.setCompliance();\n  }\n  checkCompliance() {\n    return this.isCompliant;\n  }\n  getChildren() {\n    return this.childrenAttending;\n  }\n  getRoomName() {\n    if (this.roomName) return this.roomName;else throw new Error(\"Unable to fetch room name from class Rooms\");\n  }\n  getChildrenCount() {\n    if (this.childrenAttending) return this.childrenAttending.length;else throw new Error(`Unable to return number of children in room ${this.roomName}`);\n  }\n  getEducatorCount() {\n    if (this.educatorsPresent) return this.educatorsPresent.length;else throw new Error(`Unable to return number of educators present in room ${this.roomName}`);\n  }\n  async loadChildren() {\n    try {\n      const childArray = await getChildrenByRoomName(this.roomName);\n      this.childrenAttending = childArray;\n      this.setCompliance();\n    } catch (error) {\n      console.error(`Error fetching children for room ${this.roomName}:`, error);\n      this.childrenAttending = [];\n      this.setCompliance();\n    }\n  }\n  async loadEducators() {\n    try {\n      const educatorArray = await getEducatorsByRoomName(this.roomName);\n      this.educatorsPresent = educatorArray;\n      this.setCompliance();\n    } catch (error) {\n      console.error(`Error fetching educators for room ${this.roomName}:`, error);\n      this.educatorsPresent = [];\n      this.setCompliance();\n    }\n  }\n}","map":{"version":3,"names":["getChildrenByRoomName","getEducatorsByRoomName","User","constructor","userId","username","role","children","profileImage","profileImageUrl","room","jobTitle","qualification","qualificationInstituation","emergencyContact","emergencyNumber","setRoom","setRole","setChild","child","_this$children","push","setBlob","blob","URL","revokeObjectURL","Blob","createObjectURL","undefined","setJobTitle","title","setQulification","setQualInstitution","institution","setEmergencyContact","contact","setEmergencyNumber","getUserId","getUsername","getRole","getChildren","getProfileImage","getRoom","getJobTitle","getQualification","getQualificationInstitution","getEmergencyContact","getEmergencyNumber","Children","id","firstName","lastName","isAttending","dateOfBirth","attending","medicalPlan","allergies","authorizedPersons","emergencyContact1","name","emergencyContact2","removeAllergy","allergyToRemove","removeAuthorizedPerson","removeEmergencyContact","nameToRemove","Error","addEmergencyContact","priority","contactNumber","addAuthorizedPerson","addAllergy","allergy","_this$allergies","setMedicalPlan","hasMedicalPlan","setDateOfBirth","day","month","year","dob","Date","setAttending","getId","getFirstName","getLastName","getDateOfBirth","getAttending","getAllergies","getAuthorizedPersons","authorizedList","i","length","element","element2","newAuthorizedPerson","getEmergencyContact1","getEmergencyContact2","getAge","childDOB","diff","now","getTime","seconds","Math","floor","minutes","hours","days","months","years","Rooms","roomName","childrenAttending","educatorsPresent","isCompliant","addChild","newChild","setCompliance","ratio","requiredEducators","ceil","removeChild","childToRemove","filter","checkCompliance","getRoomName","getChildrenCount","getEducatorCount","loadChildren","childArray","error","console","loadEducators","educatorArray"],"sources":["C:/Users/c_mil/Desktop/Dev/TypeScript/CareCentral Git/Care-Central/React/src/classes.tsx"],"sourcesContent":["import { getChildrenByRoomName, getEducatorsByRoomName } from \"./componants/backend/fetchData\"\r\n\r\nexport class User {\r\n    private userId: number\r\n    private username: string | null\r\n    private role?: string\r\n    private children: Children[] = []\r\n    private profileImage?: Blob | string\r\n    private profileImageUrl?: string\r\n    private room?: string\r\n    private jobTitle?: string\r\n    private qualification?: string\r\n    private qualificationInstituation?: string\r\n    private emergencyContact?: string\r\n    private emergencyNumber?: number\r\n\r\n    constructor(userId: number, username: string | null) {\r\n        this.username = username\r\n        this.userId = userId\r\n    }\r\n\r\n    public setRoom(room: string) {\r\n        this.room = room\r\n    }\r\n    public setRole(role: string) {\r\n        this.role = role\r\n    }\r\n    public setChild(child: Children) {\r\n        this.children?.push(child)\r\n    }\r\n    public setBlob(blob: Blob | string) {\r\n        if (this.profileImageUrl) {\r\n            URL.revokeObjectURL(this.profileImageUrl);\r\n        }\r\n        this.profileImage = blob;\r\n        if (blob instanceof Blob) {\r\n            this.profileImageUrl = URL.createObjectURL(blob);\r\n        } else {\r\n            this.profileImageUrl = undefined;\r\n        }\r\n    }\r\n    public setJobTitle(title: string) {\r\n        this.jobTitle = title\r\n    }\r\n    public setQulification(qualification: string) {\r\n        this.qualification = qualification\r\n    }\r\n    public setQualInstitution(institution: string) {\r\n        this.qualificationInstituation = institution\r\n    }\r\n    public setEmergencyContact(contact: string) {\r\n        this.emergencyContact = contact\r\n    }\r\n    public setEmergencyNumber(emergencyNumber: number) {\r\n        this.emergencyNumber = emergencyNumber\r\n    }\r\n\r\n    public getUserId(): number {\r\n        return this.userId\r\n    }\r\n    public getUsername(): string | null {\r\n        return this.username\r\n    }\r\n    public getRole(): string | undefined {\r\n        return this.role\r\n    }\r\n    public getChildren(): Children[] | undefined {\r\n        return this.children\r\n    }\r\n    public getProfileImage(): Blob | string | undefined {\r\n        return this.profileImage\r\n    }\r\n    public getRoom(): string | undefined {\r\n        return this.room\r\n    }\r\n    public getJobTitle(): string | undefined {\r\n        return this.jobTitle\r\n    }\r\n    public getQualification(): string | undefined {\r\n        return this.qualification\r\n    }\r\n    public getQualificationInstitution(): string | undefined {\r\n        return this.qualificationInstituation\r\n    }\r\n    public getEmergencyContact(): string | undefined {\r\n        return this.emergencyContact\r\n    }\r\n    public getEmergencyNumber(): number | undefined {\r\n        return this.emergencyNumber\r\n    }\r\n}\r\n\r\nexport class Children {\r\n    private id: number\r\n    private firstName: string\r\n    private lastName: string\r\n    private dateOfBirth?: Date\r\n    private attending: boolean\r\n    private room?: string\r\n    private medicalPlan?: boolean\r\n    private allergies: string[] =[]\r\n    private authorizedPersons: string[] = []\r\n    private emergencyContact1: {\r\n        name: string,\r\n        contact: number\r\n    } = {\r\n            name: \"Not Provided\",\r\n            contact: 0o0\r\n    }\r\n    private emergencyContact2: {\r\n        name: string,\r\n        contact: number\r\n    } = {\r\n        name: \"Not Provided\",\r\n        contact: 0o0\r\n}\r\n\r\n    constructor(id: number, firstName: string, lastName: string, isAttending: boolean) {\r\n        this.id = id\r\n        this.firstName = firstName\r\n        this.lastName = lastName\r\n        this.attending = isAttending\r\n    }\r\n\r\n    public removeAllergy(allergyToRemove: string) {\r\n        // Remove allergy\r\n    }\r\n    public removeAuthorizedPerson(firstName: string, lastName: string) {\r\n        // Remove person\r\n    }\r\n    public removeEmergencyContact(nameToRemove: string) {\r\n        if (this.emergencyContact1.name === nameToRemove)\r\n            this.emergencyContact1 = {\r\n                name: \"Not Provided\",\r\n                contact: 0o0\r\n            }\r\n        else if (this.emergencyContact2.name === nameToRemove)\r\n            this.emergencyContact2 = {\r\n                name: \"Not Provided\",\r\n                contact: 0o0\r\n            }\r\n        else\r\n            throw new Error(`${nameToRemove} was not found in emergency contacts`)\r\n    }\r\n\r\n    public addEmergencyContact(priority: number, name: string, contactNumber: number) {\r\n        if (priority === 1) {\r\n            this.emergencyContact1 = {\r\n                name: name,\r\n                contact: contactNumber\r\n            }\r\n        }\r\n        else if (priority === 2) {\r\n            this.emergencyContact2 = {\r\n                name: name,\r\n                contact: contactNumber\r\n            }\r\n        }\r\n        else\r\n            throw new Error(\"Emergency contact must be either 1st or 2nd emergency contact\")\r\n    }\r\n    public addAuthorizedPerson(firstName: string, lastName: string) {\r\n        this.authorizedPersons.push(firstName)\r\n        this.authorizedPersons.push(lastName)\r\n    }\r\n    public addAllergy(allergy: string) {\r\n        this.allergies?.push(allergy)\r\n    }\r\n    public setMedicalPlan(hasMedicalPlan: boolean) {\r\n        this.medicalPlan = hasMedicalPlan\r\n    }\r\n    public setDateOfBirth(day: number, month: number, year: number) {\r\n        let dob: Date = new Date(day + \"-\" + month + \"-\" + year)\r\n        this.dateOfBirth = dob\r\n    }\r\n    public setAttending(isAttending: boolean) {\r\n        this.attending = isAttending\r\n    }\r\n    public setRoom(room: string) {\r\n        this.room = room\r\n    }\r\n\r\n    public getId() {\r\n        return this.id\r\n    }\r\n    public getFirstName() {\r\n        return this.firstName\r\n    }\r\n    public getLastName() {\r\n        return this.lastName\r\n    }\r\n    public getDateOfBirth() {\r\n        if (this.dateOfBirth)\r\n            return this.dateOfBirth\r\n        else\r\n            throw new Error(\"Date of birth not set\")\r\n    }\r\n    public getAttending() {\r\n        return this.attending\r\n    }\r\n    public getRoom() {\r\n        if (this.room)\r\n            return this.room\r\n        else\r\n            throw new Error(\"Room not set\")\r\n    }\r\n    public hasMedicalPlan() {\r\n        if (this.medicalPlan)\r\n            return this.medicalPlan\r\n        else\r\n            return false\r\n    }\r\n    public getAllergies() {\r\n        if (this.allergies)\r\n            return this.allergies\r\n        else\r\n            return \"No allergies\"\r\n    }\r\n    public getAuthorizedPersons() {\r\n        if (this.authorizedPersons) {\r\n            interface Person {\r\n                firstName: string,\r\n                lastName: string\r\n            }\r\n            let authorizedList: Person[] = []\r\n\r\n            for (let i = 0; i < this.authorizedPersons.length; i+=2) {\r\n                const element = this.authorizedPersons[i];\r\n                const element2 = this.authorizedPersons[i+1]\r\n                \r\n                const newAuthorizedPerson: Person = {\r\n                    firstName: element,\r\n                    lastName: element2\r\n                }\r\n\r\n                authorizedList.push(newAuthorizedPerson)\r\n            }\r\n\r\n            return authorizedList\r\n        }\r\n        else\r\n            throw new Error(\"No authorized persons\")\r\n    }\r\n    public getEmergencyContact1() {\r\n        return this.emergencyContact1\r\n    }\r\n    public getEmergencyContact2() {\r\n        return this.emergencyContact2\r\n    }\r\n    public getAge(): String {\r\n        const childDOB = this.getDateOfBirth()\r\n        let diff = Date.now() - childDOB.getTime()\r\n      \r\n        let seconds = Math.floor(diff / 1000)\r\n        let minutes = Math.floor(seconds / 60)\r\n        let hours = Math.floor(minutes / 60)\r\n        let days = Math.floor(hours / 24)\r\n        let months = Math.floor(days / 30)\r\n        let years = Math.floor(days / 365)\r\n      \r\n        seconds %= 60\r\n        minutes %= 60\r\n        hours %= 24\r\n        days %= 30\r\n        months %= 12\r\n      \r\n        return `${years} yrs, ${months} mths`\r\n      }\r\n}\r\n\r\nexport class Rooms {\r\n    private roomName: string\r\n    private childrenAttending: Children[] = []\r\n    private educatorsPresent: User[] = []\r\n    private isCompliant: boolean = false\r\n\r\n    constructor(roomName: string) {\r\n        this.roomName = roomName\r\n    }\r\n\r\n    public addChild(newChild: Children) {\r\n        this.childrenAttending.push(newChild)\r\n        this.setCompliance()\r\n    }\r\n    public setCompliance() {\r\n        let ratio: number\r\n\r\n        if (this.childrenAttending.length === 0) {\r\n            this.isCompliant = true\r\n        }\r\n        \r\n        else if (this.childrenAttending.length > 0 && this.educatorsPresent.length > 0) {\r\n            switch (this.roomName) {\r\n                case \"Babies\":\r\n                    ratio = 4\r\n                    break;\r\n            \r\n                case \"Toddlers\":\r\n                    ratio = 5\r\n                    break;\r\n                \r\n                case \"Pre Kindergarten\":\r\n                    ratio = 8\r\n                    break;\r\n                \r\n                case \"Kindergarten\":\r\n                    ratio = 11\r\n                    break;\r\n                \r\n                case \"Preschool\":\r\n                    ratio = 12\r\n                    break;\r\n                \r\n                default:\r\n                    throw new Error(`Room name ${this.roomName} does not match any hard coded room name`)\r\n            }\r\n\r\n            const requiredEducators = Math.ceil(this.childrenAttending.length / ratio)\r\n            this.isCompliant = this.educatorsPresent.length >= requiredEducators\r\n        }\r\n    }\r\n\r\n    public removeChild(childToRemove: Children) {\r\n        this.childrenAttending = this.childrenAttending.filter(\r\n            child => child.getId() !== childToRemove.getId()\r\n        )\r\n        this.setCompliance()\r\n    }\r\n\r\n    public checkCompliance() {\r\n        return this.isCompliant\r\n    }\r\n    public getChildren() {\r\n        return this.childrenAttending\r\n    }\r\n    public getRoomName() {\r\n        if (this.roomName)\r\n            return this.roomName\r\n        else\r\n            throw new Error(\"Unable to fetch room name from class Rooms\")\r\n    }\r\n    public getChildrenCount() {\r\n        if (this.childrenAttending)\r\n            return this.childrenAttending.length\r\n        else\r\n            throw new Error(`Unable to return number of children in room ${this.roomName}`)\r\n    }\r\n    public getEducatorCount() {\r\n        if (this.educatorsPresent)\r\n            return this.educatorsPresent.length\r\n        else\r\n            throw new Error(`Unable to return number of educators present in room ${this.roomName}`)\r\n    }\r\n    public async loadChildren() {\r\n        try {\r\n            const childArray = await getChildrenByRoomName(this.roomName)\r\n            this.childrenAttending = childArray\r\n            this.setCompliance()\r\n        } catch (error) {\r\n            console.error(`Error fetching children for room ${this.roomName}:`, error)\r\n            this.childrenAttending = []\r\n            this.setCompliance()\r\n        }\r\n    }\r\n    public async loadEducators() {\r\n        try {\r\n            const educatorArray = await getEducatorsByRoomName(this.roomName)\r\n            this.educatorsPresent = educatorArray\r\n            this.setCompliance()\r\n        } catch (error) {\r\n            console.error(`Error fetching educators for room ${this.roomName}:`, error)\r\n            this.educatorsPresent = []\r\n            this.setCompliance()\r\n        }\r\n    }\r\n}"],"mappings":"AAAA,SAASA,qBAAqB,EAAEC,sBAAsB,QAAQ,gCAAgC;AAE9F,OAAO,MAAMC,IAAI,CAAC;EAcdC,WAAWA,CAACC,MAAc,EAAEC,QAAuB,EAAE;IAAA,KAb7CD,MAAM;IAAA,KACNC,QAAQ;IAAA,KACRC,IAAI;IAAA,KACJC,QAAQ,GAAe,EAAE;IAAA,KACzBC,YAAY;IAAA,KACZC,eAAe;IAAA,KACfC,IAAI;IAAA,KACJC,QAAQ;IAAA,KACRC,aAAa;IAAA,KACbC,yBAAyB;IAAA,KACzBC,gBAAgB;IAAA,KAChBC,eAAe;IAGnB,IAAI,CAACV,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACD,MAAM,GAAGA,MAAM;EACxB;EAEOY,OAAOA,CAACN,IAAY,EAAE;IACzB,IAAI,CAACA,IAAI,GAAGA,IAAI;EACpB;EACOO,OAAOA,CAACX,IAAY,EAAE;IACzB,IAAI,CAACA,IAAI,GAAGA,IAAI;EACpB;EACOY,QAAQA,CAACC,KAAe,EAAE;IAAA,IAAAC,cAAA;IAC7B,CAAAA,cAAA,OAAI,CAACb,QAAQ,cAAAa,cAAA,uBAAbA,cAAA,CAAeC,IAAI,CAACF,KAAK,CAAC;EAC9B;EACOG,OAAOA,CAACC,IAAmB,EAAE;IAChC,IAAI,IAAI,CAACd,eAAe,EAAE;MACtBe,GAAG,CAACC,eAAe,CAAC,IAAI,CAAChB,eAAe,CAAC;IAC7C;IACA,IAAI,CAACD,YAAY,GAAGe,IAAI;IACxB,IAAIA,IAAI,YAAYG,IAAI,EAAE;MACtB,IAAI,CAACjB,eAAe,GAAGe,GAAG,CAACG,eAAe,CAACJ,IAAI,CAAC;IACpD,CAAC,MAAM;MACH,IAAI,CAACd,eAAe,GAAGmB,SAAS;IACpC;EACJ;EACOC,WAAWA,CAACC,KAAa,EAAE;IAC9B,IAAI,CAACnB,QAAQ,GAAGmB,KAAK;EACzB;EACOC,eAAeA,CAACnB,aAAqB,EAAE;IAC1C,IAAI,CAACA,aAAa,GAAGA,aAAa;EACtC;EACOoB,kBAAkBA,CAACC,WAAmB,EAAE;IAC3C,IAAI,CAACpB,yBAAyB,GAAGoB,WAAW;EAChD;EACOC,mBAAmBA,CAACC,OAAe,EAAE;IACxC,IAAI,CAACrB,gBAAgB,GAAGqB,OAAO;EACnC;EACOC,kBAAkBA,CAACrB,eAAuB,EAAE;IAC/C,IAAI,CAACA,eAAe,GAAGA,eAAe;EAC1C;EAEOsB,SAASA,CAAA,EAAW;IACvB,OAAO,IAAI,CAACjC,MAAM;EACtB;EACOkC,WAAWA,CAAA,EAAkB;IAChC,OAAO,IAAI,CAACjC,QAAQ;EACxB;EACOkC,OAAOA,CAAA,EAAuB;IACjC,OAAO,IAAI,CAACjC,IAAI;EACpB;EACOkC,WAAWA,CAAA,EAA2B;IACzC,OAAO,IAAI,CAACjC,QAAQ;EACxB;EACOkC,eAAeA,CAAA,EAA8B;IAChD,OAAO,IAAI,CAACjC,YAAY;EAC5B;EACOkC,OAAOA,CAAA,EAAuB;IACjC,OAAO,IAAI,CAAChC,IAAI;EACpB;EACOiC,WAAWA,CAAA,EAAuB;IACrC,OAAO,IAAI,CAAChC,QAAQ;EACxB;EACOiC,gBAAgBA,CAAA,EAAuB;IAC1C,OAAO,IAAI,CAAChC,aAAa;EAC7B;EACOiC,2BAA2BA,CAAA,EAAuB;IACrD,OAAO,IAAI,CAAChC,yBAAyB;EACzC;EACOiC,mBAAmBA,CAAA,EAAuB;IAC7C,OAAO,IAAI,CAAChC,gBAAgB;EAChC;EACOiC,kBAAkBA,CAAA,EAAuB;IAC5C,OAAO,IAAI,CAAChC,eAAe;EAC/B;AACJ;AAEA,OAAO,MAAMiC,QAAQ,CAAC;EAyBlB7C,WAAWA,CAAC8C,EAAU,EAAEC,SAAiB,EAAEC,QAAgB,EAAEC,WAAoB,EAAE;IAAA,KAxB3EH,EAAE;IAAA,KACFC,SAAS;IAAA,KACTC,QAAQ;IAAA,KACRE,WAAW;IAAA,KACXC,SAAS;IAAA,KACT5C,IAAI;IAAA,KACJ6C,WAAW;IAAA,KACXC,SAAS,GAAY,EAAE;IAAA,KACvBC,iBAAiB,GAAa,EAAE;IAAA,KAChCC,iBAAiB,GAGrB;MACIC,IAAI,EAAE,cAAc;MACpBxB,OAAO,EAAE;IACjB,CAAC;IAAA,KACOyB,iBAAiB,GAGrB;MACAD,IAAI,EAAE,cAAc;MACpBxB,OAAO,EAAE;IACjB,CAAC;IAGO,IAAI,CAACc,EAAE,GAAGA,EAAE;IACZ,IAAI,CAACC,SAAS,GAAGA,SAAS;IAC1B,IAAI,CAACC,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACG,SAAS,GAAGF,WAAW;EAChC;EAEOS,aAAaA,CAACC,eAAuB,EAAE;IAC1C;EAAA;EAEGC,sBAAsBA,CAACb,SAAiB,EAAEC,QAAgB,EAAE;IAC/D;EAAA;EAEGa,sBAAsBA,CAACC,YAAoB,EAAE;IAChD,IAAI,IAAI,CAACP,iBAAiB,CAACC,IAAI,KAAKM,YAAY,EAC5C,IAAI,CAACP,iBAAiB,GAAG;MACrBC,IAAI,EAAE,cAAc;MACpBxB,OAAO,EAAE;IACb,CAAC,MACA,IAAI,IAAI,CAACyB,iBAAiB,CAACD,IAAI,KAAKM,YAAY,EACjD,IAAI,CAACL,iBAAiB,GAAG;MACrBD,IAAI,EAAE,cAAc;MACpBxB,OAAO,EAAE;IACb,CAAC,MAED,MAAM,IAAI+B,KAAK,CAAC,GAAGD,YAAY,sCAAsC,CAAC;EAC9E;EAEOE,mBAAmBA,CAACC,QAAgB,EAAET,IAAY,EAAEU,aAAqB,EAAE;IAC9E,IAAID,QAAQ,KAAK,CAAC,EAAE;MAChB,IAAI,CAACV,iBAAiB,GAAG;QACrBC,IAAI,EAAEA,IAAI;QACVxB,OAAO,EAAEkC;MACb,CAAC;IACL,CAAC,MACI,IAAID,QAAQ,KAAK,CAAC,EAAE;MACrB,IAAI,CAACR,iBAAiB,GAAG;QACrBD,IAAI,EAAEA,IAAI;QACVxB,OAAO,EAAEkC;MACb,CAAC;IACL,CAAC,MAEG,MAAM,IAAIH,KAAK,CAAC,+DAA+D,CAAC;EACxF;EACOI,mBAAmBA,CAACpB,SAAiB,EAAEC,QAAgB,EAAE;IAC5D,IAAI,CAACM,iBAAiB,CAACpC,IAAI,CAAC6B,SAAS,CAAC;IACtC,IAAI,CAACO,iBAAiB,CAACpC,IAAI,CAAC8B,QAAQ,CAAC;EACzC;EACOoB,UAAUA,CAACC,OAAe,EAAE;IAAA,IAAAC,eAAA;IAC/B,CAAAA,eAAA,OAAI,CAACjB,SAAS,cAAAiB,eAAA,uBAAdA,eAAA,CAAgBpD,IAAI,CAACmD,OAAO,CAAC;EACjC;EACOE,cAAcA,CAACC,cAAuB,EAAE;IAC3C,IAAI,CAACpB,WAAW,GAAGoB,cAAc;EACrC;EACOC,cAAcA,CAACC,GAAW,EAAEC,KAAa,EAAEC,IAAY,EAAE;IAC5D,IAAIC,GAAS,GAAG,IAAIC,IAAI,CAACJ,GAAG,GAAG,GAAG,GAAGC,KAAK,GAAG,GAAG,GAAGC,IAAI,CAAC;IACxD,IAAI,CAAC1B,WAAW,GAAG2B,GAAG;EAC1B;EACOE,YAAYA,CAAC9B,WAAoB,EAAE;IACtC,IAAI,CAACE,SAAS,GAAGF,WAAW;EAChC;EACOpC,OAAOA,CAACN,IAAY,EAAE;IACzB,IAAI,CAACA,IAAI,GAAGA,IAAI;EACpB;EAEOyE,KAAKA,CAAA,EAAG;IACX,OAAO,IAAI,CAAClC,EAAE;EAClB;EACOmC,YAAYA,CAAA,EAAG;IAClB,OAAO,IAAI,CAAClC,SAAS;EACzB;EACOmC,WAAWA,CAAA,EAAG;IACjB,OAAO,IAAI,CAAClC,QAAQ;EACxB;EACOmC,cAAcA,CAAA,EAAG;IACpB,IAAI,IAAI,CAACjC,WAAW,EAChB,OAAO,IAAI,CAACA,WAAW,MAEvB,MAAM,IAAIa,KAAK,CAAC,uBAAuB,CAAC;EAChD;EACOqB,YAAYA,CAAA,EAAG;IAClB,OAAO,IAAI,CAACjC,SAAS;EACzB;EACOZ,OAAOA,CAAA,EAAG;IACb,IAAI,IAAI,CAAChC,IAAI,EACT,OAAO,IAAI,CAACA,IAAI,MAEhB,MAAM,IAAIwD,KAAK,CAAC,cAAc,CAAC;EACvC;EACOS,cAAcA,CAAA,EAAG;IACpB,IAAI,IAAI,CAACpB,WAAW,EAChB,OAAO,IAAI,CAACA,WAAW,MAEvB,OAAO,KAAK;EACpB;EACOiC,YAAYA,CAAA,EAAG;IAClB,IAAI,IAAI,CAAChC,SAAS,EACd,OAAO,IAAI,CAACA,SAAS,MAErB,OAAO,cAAc;EAC7B;EACOiC,oBAAoBA,CAAA,EAAG;IAC1B,IAAI,IAAI,CAAChC,iBAAiB,EAAE;MAKxB,IAAIiC,cAAwB,GAAG,EAAE;MAEjC,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAAClC,iBAAiB,CAACmC,MAAM,EAAED,CAAC,IAAE,CAAC,EAAE;QACrD,MAAME,OAAO,GAAG,IAAI,CAACpC,iBAAiB,CAACkC,CAAC,CAAC;QACzC,MAAMG,QAAQ,GAAG,IAAI,CAACrC,iBAAiB,CAACkC,CAAC,GAAC,CAAC,CAAC;QAE5C,MAAMI,mBAA2B,GAAG;UAChC7C,SAAS,EAAE2C,OAAO;UAClB1C,QAAQ,EAAE2C;QACd,CAAC;QAEDJ,cAAc,CAACrE,IAAI,CAAC0E,mBAAmB,CAAC;MAC5C;MAEA,OAAOL,cAAc;IACzB,CAAC,MAEG,MAAM,IAAIxB,KAAK,CAAC,uBAAuB,CAAC;EAChD;EACO8B,oBAAoBA,CAAA,EAAG;IAC1B,OAAO,IAAI,CAACtC,iBAAiB;EACjC;EACOuC,oBAAoBA,CAAA,EAAG;IAC1B,OAAO,IAAI,CAACrC,iBAAiB;EACjC;EACOsC,MAAMA,CAAA,EAAW;IACpB,MAAMC,QAAQ,GAAG,IAAI,CAACb,cAAc,CAAC,CAAC;IACtC,IAAIc,IAAI,GAAGnB,IAAI,CAACoB,GAAG,CAAC,CAAC,GAAGF,QAAQ,CAACG,OAAO,CAAC,CAAC;IAE1C,IAAIC,OAAO,GAAGC,IAAI,CAACC,KAAK,CAACL,IAAI,GAAG,IAAI,CAAC;IACrC,IAAIM,OAAO,GAAGF,IAAI,CAACC,KAAK,CAACF,OAAO,GAAG,EAAE,CAAC;IACtC,IAAII,KAAK,GAAGH,IAAI,CAACC,KAAK,CAACC,OAAO,GAAG,EAAE,CAAC;IACpC,IAAIE,IAAI,GAAGJ,IAAI,CAACC,KAAK,CAACE,KAAK,GAAG,EAAE,CAAC;IACjC,IAAIE,MAAM,GAAGL,IAAI,CAACC,KAAK,CAACG,IAAI,GAAG,EAAE,CAAC;IAClC,IAAIE,KAAK,GAAGN,IAAI,CAACC,KAAK,CAACG,IAAI,GAAG,GAAG,CAAC;IAElCL,OAAO,IAAI,EAAE;IACbG,OAAO,IAAI,EAAE;IACbC,KAAK,IAAI,EAAE;IACXC,IAAI,IAAI,EAAE;IACVC,MAAM,IAAI,EAAE;IAEZ,OAAO,GAAGC,KAAK,SAASD,MAAM,OAAO;EACvC;AACN;AAEA,OAAO,MAAME,KAAK,CAAC;EAMf5G,WAAWA,CAAC6G,QAAgB,EAAE;IAAA,KALtBA,QAAQ;IAAA,KACRC,iBAAiB,GAAe,EAAE;IAAA,KAClCC,gBAAgB,GAAW,EAAE;IAAA,KAC7BC,WAAW,GAAY,KAAK;IAGhC,IAAI,CAACH,QAAQ,GAAGA,QAAQ;EAC5B;EAEOI,QAAQA,CAACC,QAAkB,EAAE;IAChC,IAAI,CAACJ,iBAAiB,CAAC5F,IAAI,CAACgG,QAAQ,CAAC;IACrC,IAAI,CAACC,aAAa,CAAC,CAAC;EACxB;EACOA,aAAaA,CAAA,EAAG;IACnB,IAAIC,KAAa;IAEjB,IAAI,IAAI,CAACN,iBAAiB,CAACrB,MAAM,KAAK,CAAC,EAAE;MACrC,IAAI,CAACuB,WAAW,GAAG,IAAI;IAC3B,CAAC,MAEI,IAAI,IAAI,CAACF,iBAAiB,CAACrB,MAAM,GAAG,CAAC,IAAI,IAAI,CAACsB,gBAAgB,CAACtB,MAAM,GAAG,CAAC,EAAE;MAC5E,QAAQ,IAAI,CAACoB,QAAQ;QACjB,KAAK,QAAQ;UACTO,KAAK,GAAG,CAAC;UACT;QAEJ,KAAK,UAAU;UACXA,KAAK,GAAG,CAAC;UACT;QAEJ,KAAK,kBAAkB;UACnBA,KAAK,GAAG,CAAC;UACT;QAEJ,KAAK,cAAc;UACfA,KAAK,GAAG,EAAE;UACV;QAEJ,KAAK,WAAW;UACZA,KAAK,GAAG,EAAE;UACV;QAEJ;UACI,MAAM,IAAIrD,KAAK,CAAC,aAAa,IAAI,CAAC8C,QAAQ,0CAA0C,CAAC;MAC7F;MAEA,MAAMQ,iBAAiB,GAAGhB,IAAI,CAACiB,IAAI,CAAC,IAAI,CAACR,iBAAiB,CAACrB,MAAM,GAAG2B,KAAK,CAAC;MAC1E,IAAI,CAACJ,WAAW,GAAG,IAAI,CAACD,gBAAgB,CAACtB,MAAM,IAAI4B,iBAAiB;IACxE;EACJ;EAEOE,WAAWA,CAACC,aAAuB,EAAE;IACxC,IAAI,CAACV,iBAAiB,GAAG,IAAI,CAACA,iBAAiB,CAACW,MAAM,CAClDzG,KAAK,IAAIA,KAAK,CAACgE,KAAK,CAAC,CAAC,KAAKwC,aAAa,CAACxC,KAAK,CAAC,CACnD,CAAC;IACD,IAAI,CAACmC,aAAa,CAAC,CAAC;EACxB;EAEOO,eAAeA,CAAA,EAAG;IACrB,OAAO,IAAI,CAACV,WAAW;EAC3B;EACO3E,WAAWA,CAAA,EAAG;IACjB,OAAO,IAAI,CAACyE,iBAAiB;EACjC;EACOa,WAAWA,CAAA,EAAG;IACjB,IAAI,IAAI,CAACd,QAAQ,EACb,OAAO,IAAI,CAACA,QAAQ,MAEpB,MAAM,IAAI9C,KAAK,CAAC,4CAA4C,CAAC;EACrE;EACO6D,gBAAgBA,CAAA,EAAG;IACtB,IAAI,IAAI,CAACd,iBAAiB,EACtB,OAAO,IAAI,CAACA,iBAAiB,CAACrB,MAAM,MAEpC,MAAM,IAAI1B,KAAK,CAAC,+CAA+C,IAAI,CAAC8C,QAAQ,EAAE,CAAC;EACvF;EACOgB,gBAAgBA,CAAA,EAAG;IACtB,IAAI,IAAI,CAACd,gBAAgB,EACrB,OAAO,IAAI,CAACA,gBAAgB,CAACtB,MAAM,MAEnC,MAAM,IAAI1B,KAAK,CAAC,wDAAwD,IAAI,CAAC8C,QAAQ,EAAE,CAAC;EAChG;EACA,MAAaiB,YAAYA,CAAA,EAAG;IACxB,IAAI;MACA,MAAMC,UAAU,GAAG,MAAMlI,qBAAqB,CAAC,IAAI,CAACgH,QAAQ,CAAC;MAC7D,IAAI,CAACC,iBAAiB,GAAGiB,UAAU;MACnC,IAAI,CAACZ,aAAa,CAAC,CAAC;IACxB,CAAC,CAAC,OAAOa,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,oCAAoC,IAAI,CAACnB,QAAQ,GAAG,EAAEmB,KAAK,CAAC;MAC1E,IAAI,CAAClB,iBAAiB,GAAG,EAAE;MAC3B,IAAI,CAACK,aAAa,CAAC,CAAC;IACxB;EACJ;EACA,MAAae,aAAaA,CAAA,EAAG;IACzB,IAAI;MACA,MAAMC,aAAa,GAAG,MAAMrI,sBAAsB,CAAC,IAAI,CAAC+G,QAAQ,CAAC;MACjE,IAAI,CAACE,gBAAgB,GAAGoB,aAAa;MACrC,IAAI,CAAChB,aAAa,CAAC,CAAC;IACxB,CAAC,CAAC,OAAOa,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,qCAAqC,IAAI,CAACnB,QAAQ,GAAG,EAAEmB,KAAK,CAAC;MAC3E,IAAI,CAACjB,gBAAgB,GAAG,EAAE;MAC1B,IAAI,CAACI,aAAa,CAAC,CAAC;IACxB;EACJ;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}