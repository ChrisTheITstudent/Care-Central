{"ast":null,"code":"import { getChildrenByRoomName, getEducatorsByRoomName } from \"./componants/backend/fetchData\";\nexport class User {\n  constructor(userId, username) {\n    this.userId = void 0;\n    this.username = void 0;\n    this.role = void 0;\n    this.children = void 0;\n    this.profileImage = void 0;\n    this.room = void 0;\n    this.username = username;\n    this.userId = userId;\n  }\n  setRoom(room) {\n    this.room = room;\n  }\n  setRole(role) {\n    this.role = role;\n  }\n  setChild(child) {\n    var _this$children;\n    (_this$children = this.children) === null || _this$children === void 0 ? void 0 : _this$children.push(child);\n  }\n  setBlob(blob) {\n    this.profileImage = blob;\n  }\n  getUserId() {\n    return this.userId;\n  }\n  getUsername() {\n    return this.username;\n  }\n  getRole() {\n    return this.role;\n  }\n  getChildren() {\n    return this.children;\n  }\n  getProfileImage() {\n    return this.profileImage;\n  }\n  getRoom() {\n    return this.room;\n  }\n}\nexport class Children {\n  constructor(id, firstName, lastName, isAttending) {\n    this.id = void 0;\n    this.firstName = void 0;\n    this.lastName = void 0;\n    this.dateOfBirth = void 0;\n    this.attending = void 0;\n    this.room = void 0;\n    this.id = id;\n    this.firstName = firstName;\n    this.lastName = lastName;\n    this.attending = isAttending;\n  }\n  setDateOfBirth(day, month, year) {\n    let dob = new Date(day + \"-\" + month + \"-\" + year);\n    this.dateOfBirth = dob;\n  }\n  setAttending(isAttending) {\n    this.attending = isAttending;\n  }\n  setRoom(room) {\n    this.room = room;\n  }\n  getId() {\n    return this.id;\n  }\n  getFirstName() {\n    return this.firstName;\n  }\n  getLastName() {\n    return this.lastName;\n  }\n  getDateOfBirth() {\n    if (this.dateOfBirth) return this.dateOfBirth;else throw new Error(\"Date of birth not set\");\n  }\n  getAttending() {\n    return this.attending;\n  }\n  getRoom() {\n    if (this.room) return this.room;else throw new Error(\"Room not set\");\n  }\n}\nexport class Rooms {\n  constructor(roomName) {\n    this.roomName = void 0;\n    this.childrenAttending = [];\n    this.educatorsPresent = [];\n    this.isCompliant = false;\n    this.roomName = roomName;\n    this.setCompliance();\n  }\n  addChild(newChild) {\n    this.childrenAttending.push(newChild);\n  }\n  setCompliance() {\n    let ratio;\n    if (this.childrenAttending.length = 0) this.isCompliant = true;else if (this.childrenAttending.length > 0 && this.educatorsPresent.length > 0) {\n      switch (this.roomName) {\n        case this.roomName = \"Babies\":\n          ratio = 4;\n          break;\n        case this.roomName = \"Toddlers\":\n          ratio = 5;\n          break;\n        case this.roomName = \"Pre Kindergarten\":\n          ratio = 8;\n          break;\n        case this.roomName = \"Kindergarten\":\n          ratio = 11;\n          break;\n        case this.roomName = \"Preschool\":\n          ratio = 12;\n          break;\n        default:\n          throw new Error(`Room name ${this.roomName} does not match any hard coded room name`);\n      }\n      const requiredEducators = Math.ceil(this.childrenAttending.length / ratio);\n      this.isCompliant = this.educatorsPresent.length >= requiredEducators;\n    }\n  }\n  removeChild(childToRemove) {\n    this.childrenAttending = this.childrenAttending.filter(child => child.getId() !== childToRemove.getId());\n  }\n  checkCompliance() {\n    return this.isCompliant;\n  }\n  getChildren() {\n    return this.childrenAttending;\n  }\n  getRoomName() {\n    if (this.roomName) return this.roomName;else throw new Error(\"Unable to fetch room name from class Rooms\");\n  }\n  getChildrenCount() {\n    if (this.childrenAttending) return this.childrenAttending.length;else throw new Error(`Unable to return number of children in room ${this.roomName}`);\n  }\n  getEducatorCount() {\n    if (this.educatorsPresent) return this.educatorsPresent.length;else throw new Error(`Unable to return number of educators present in room ${this.roomName}`);\n  }\n  async loadChildren() {\n    try {\n      const childArray = await getChildrenByRoomName(this.roomName);\n      this.childrenAttending = childArray;\n    } catch (error) {\n      console.error(`Error fetching children for room ${this.roomName}:`, error);\n      this.childrenAttending = [];\n    }\n  }\n  async loadEducators() {\n    try {\n      const educatorArray = await getEducatorsByRoomName(this.roomName);\n      this.educatorsPresent = educatorArray;\n    } catch (error) {\n      console.error(`Error fetching educators for room ${this.roomName}:`, error);\n      this.educatorsPresent = [];\n    }\n  }\n}","map":{"version":3,"names":["getChildrenByRoomName","getEducatorsByRoomName","User","constructor","userId","username","role","children","profileImage","room","setRoom","setRole","setChild","child","_this$children","push","setBlob","blob","getUserId","getUsername","getRole","getChildren","getProfileImage","getRoom","Children","id","firstName","lastName","isAttending","dateOfBirth","attending","setDateOfBirth","day","month","year","dob","Date","setAttending","getId","getFirstName","getLastName","getDateOfBirth","Error","getAttending","Rooms","roomName","childrenAttending","educatorsPresent","isCompliant","setCompliance","addChild","newChild","ratio","length","requiredEducators","Math","ceil","removeChild","childToRemove","filter","checkCompliance","getRoomName","getChildrenCount","getEducatorCount","loadChildren","childArray","error","console","loadEducators","educatorArray"],"sources":["C:/Users/c_mil/Desktop/Dev/TypeScript/care-central/src/classes.tsx"],"sourcesContent":["import { error } from \"console\"\r\nimport { getChildrenByRoomName, getEducatorsByRoomName } from \"./componants/backend/fetchData\"\r\n\r\nexport class User {\r\n    private userId: number\r\n    private username: string\r\n    private role?: string\r\n    private children?: Children[]\r\n    private profileImage?: Blob\r\n    private room?: string\r\n\r\n    constructor(userId: number, username: string) {\r\n        this.username = username\r\n        this.userId = userId\r\n    }\r\n\r\n    public setRoom(room: string) {\r\n        this.room = room\r\n    }\r\n    public setRole(role: string) {\r\n        this.role = role\r\n    }\r\n    public setChild(child: Children) {\r\n        this.children?.push(child)\r\n    }\r\n    public setBlob(blob: Blob) {\r\n        this.profileImage = blob\r\n    }\r\n\r\n    public getUserId(): number {\r\n        return this.userId\r\n    }\r\n    public getUsername(): string {\r\n        return this.username\r\n    }\r\n    public getRole(): string | undefined {\r\n        return this.role\r\n    }\r\n    public getChildren(): Children[] | undefined {\r\n        return this.children\r\n    }\r\n    public getProfileImage(): Blob | undefined {\r\n        return this.profileImage\r\n    }\r\n    public getRoom(): string | undefined {\r\n        return this.room\r\n    }\r\n}\r\n\r\nexport class Children {\r\n    private id: number\r\n    private firstName: string\r\n    private lastName: string\r\n    private dateOfBirth?: Date\r\n    private attending: boolean\r\n    private room?: string\r\n\r\n    constructor(id: number, firstName: string, lastName: string, isAttending: boolean) {\r\n        this.id = id\r\n        this.firstName = firstName\r\n        this.lastName = lastName\r\n        this.attending = isAttending\r\n    }\r\n\r\n    public setDateOfBirth(day: number, month: number, year: number) {\r\n        let dob: Date = new Date(day + \"-\" + month + \"-\" + year)\r\n        this.dateOfBirth = dob\r\n    }\r\n    public setAttending(isAttending: boolean) {\r\n        this.attending = isAttending\r\n    }\r\n    public setRoom(room: string) {\r\n        this.room = room\r\n    }\r\n\r\n    public getId() {\r\n        return this.id\r\n    }\r\n    public getFirstName() {\r\n        return this.firstName\r\n    }\r\n    public getLastName() {\r\n        return this.lastName\r\n    }\r\n    public getDateOfBirth() {\r\n        if (this.dateOfBirth)\r\n            return this.dateOfBirth\r\n        else\r\n            throw new Error(\"Date of birth not set\")\r\n    }\r\n    public getAttending() {\r\n        return this.attending\r\n    }\r\n    public getRoom() {\r\n        if (this.room)\r\n            return this.room\r\n        else\r\n            throw new Error(\"Room not set\")\r\n    }\r\n}\r\n\r\nexport class Rooms {\r\n    private roomName: string\r\n    private childrenAttending: Children[] = []\r\n    private educatorsPresent: User[] = []\r\n    private isCompliant: boolean = false\r\n\r\n    constructor(roomName: string) {\r\n        this.roomName = roomName\r\n        this.setCompliance()\r\n    }\r\n\r\n    public addChild(newChild: Children) {\r\n        this.childrenAttending.push(newChild)\r\n    }\r\n    public setCompliance() {\r\n        let ratio: number\r\n\r\n        if (this.childrenAttending.length = 0)\r\n            this.isCompliant = true\r\n        else if (this.childrenAttending.length > 0 && this.educatorsPresent.length > 0) {\r\n            switch (this.roomName) {\r\n                case this.roomName = \"Babies\":\r\n                    ratio = 4\r\n                    break;\r\n            \r\n                case this.roomName = \"Toddlers\":\r\n                    ratio = 5\r\n                    break;\r\n                case this.roomName = \"Pre Kindergarten\":\r\n                    ratio = 8\r\n                    break;\r\n                case this.roomName = \"Kindergarten\":\r\n                    ratio = 11\r\n                    break;\r\n                case this.roomName = \"Preschool\":\r\n                    ratio = 12\r\n                    break;\r\n                \r\n                default:\r\n                    throw new Error(`Room name ${this.roomName} does not match any hard coded room name`)\r\n            }\r\n\r\n            const requiredEducators = Math.ceil(this.childrenAttending.length / ratio)\r\n            this.isCompliant = this.educatorsPresent.length >= requiredEducators\r\n        }\r\n    }\r\n\r\n    public removeChild(childToRemove: Children) {\r\n        this.childrenAttending = this.childrenAttending.filter(\r\n            child => child.getId() !== childToRemove.getId()\r\n        )\r\n    }\r\n\r\n    public checkCompliance() {\r\n        return this.isCompliant\r\n    }\r\n    public getChildren() {\r\n        return this.childrenAttending\r\n    }\r\n    public getRoomName() {\r\n        if (this.roomName)\r\n            return this.roomName\r\n        else\r\n            throw new Error(\"Unable to fetch room name from class Rooms\")\r\n    }\r\n    public getChildrenCount() {\r\n        if (this.childrenAttending)\r\n            return this.childrenAttending.length\r\n        else\r\n            throw new Error(`Unable to return number of children in room ${this.roomName}`)\r\n    }\r\n    public getEducatorCount() {\r\n        if (this.educatorsPresent)\r\n            return this.educatorsPresent.length\r\n        else\r\n            throw new Error(`Unable to return number of educators present in room ${this.roomName}`)\r\n    }\r\n    public async loadChildren() {\r\n        try {\r\n            const childArray = await getChildrenByRoomName(this.roomName)\r\n            this.childrenAttending = childArray\r\n        } catch (error) {\r\n            console.error(`Error fetching children for room ${this.roomName}:`, error)\r\n            this.childrenAttending = []\r\n        }\r\n    }\r\n    public async loadEducators() {\r\n        try {\r\n            const educatorArray = await getEducatorsByRoomName(this.roomName)\r\n            this.educatorsPresent = educatorArray\r\n        } catch (error) {\r\n            console.error(`Error fetching educators for room ${this.roomName}:`, error)\r\n            this.educatorsPresent = []\r\n        }\r\n    }\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}